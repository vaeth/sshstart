#!/usr/bin/env sh
# (C) Martin V\"ath <martin@mvath.de>
set -u
set -f
version=4.7

Echo() {
	printf '%s\n' "$*"
}

Fatal() {
	Echo "${0##*/}: $*" >&2
	exit 2
}

Version() {
	Echo "sshstart $version"
	exit 0
}

Push() {
for push
do	case ${push:-!} in
*[!-abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_,.:+/@=]*)
	push=`push.sh 2>/dev/null` || Fatal \
	"push.sh from https://github.com/vaeth/push (v2.0 or newer) required"
	eval "$push"
	Push "$@"
	return;;
esac
done
push=$1
shift
eval "$push=\${$push-}\${$push:+\\ }\$*"
}

EchoExec() {
	echoexec=
	if [ "${1:++}" = exec ]
	then	echoexec=exec
		shift
	fi
	if $verbose
	then	echocmd=
		Push echocmd "$@" || return 0
		Echo "$echocmd"
	fi
	$echoexec ${1+"$@"}
}

Sanitize() {
	case ${2:-x} in
	*[!0123456789]*)
		eval $1=
		return;;
	esac
	eval $1=\$2
}

Usage() {
	Echo "Usage: ${0##*/} [options] [--] [args]
This script will do the following things:

0. PATH is prefixed with /usr/local/bin:/usr/bin:/bin
1. If no gpg-agent is running, one is started to emulate an ssh server.
2. If the user had no keys added yet, ssh-add is called.
3. If the script is called under a different name than \"sshstart\", e.g.
   \"ssh-wrap\" then everything after the last non-letter symbol of the
   name is removed, and the corresponding first matching file is executed
   and gets passed [args] as arguments.

The intention is that you link this file e.g. under the names \"ssh-wrap\"
and \"rsync-wrap\" which then behaves like \"ssh\" or \"rsync\" but with the
option to start first gpg-agent and add your keys if this had not yet happened.
In order to set correct environment variables for non-wrapped commands, put
	unset SSH_AGENT_PID
	eval \"\`sshstart -e\`\"
in your shell startup file. It might also be convenient to put e.g.
	alias ssh='ssh-wrap --'
	alias rsync='rsync-wrap --'
	...
in your shell startup file to let 'ssh' ask for your keys only once.

The following options are available:
-d SEC pass --default-cache-ttl-ssh SEC --default-cache-ttl SEC to gpg-agent
       (default: 315360000 seconds = 10 years; - uses gpg-agents's default)
-t SEC pass --max-cache-ttl-ssh SEC --max-cache-ttl SEC to gpg-agent
       (default: 315360000 = 10 years; - uses gpg-agents's default)
-T     Do not set GPG_TTY. You might want to manually export GPG_TTY=\`tty\`.
       Can be comined with -e.
-U     Do not update tty according to GPG_TTY. Similar to -T with unset GPG_TTY
-G     Skip step 1: do not start the gpg-agent
-A     Skip step 2: do not run ssh-add
-X     Skip step 3: Do not execute anything afterwards
-e     Similar to -X but output sockets for usage with eval. Disables -v.
       If combined with -T does not output commands to set/update GPG_TTY
-g ARG Pass ARG to gpg-agent (accumulative)
-a ARG Pass ARG to ssh-add (accumulative)
-x NAME Pretend that the script has been called under the name \"NAME\"
-k     Add keys even if there were already some keys added
-K     Do not add default keys from ~/.ssh to arguments of ssh-add
-P     Do not modify PATH
-v     Verbose mode
-V     Print version and exit
-h     Print this help message and exit"
	exit ${1:-1}
}

AddEvalVar() {
	for addevalvar
	do	if [ -n "${addevalvar:++}" ]
		then	evalvar=$evalvar${evalvar:+;\ }$addevalvar
		fi
	done
}

InitEvalVar() {
	evalvar=
	AddEvalVar ${1+"$@"}
}

FinishEvalVar() {
	[ -n "${evalvar:++}" ] || evalvar=:
}

SetEvalVar() {
	InitEvalVar "$@"
	FinishEvalVar
}

EchoEvalVar() {
	Echo "$evalvar"
}

EvalEvalVar() {
	eval "$evalvar"
}

EchoSetEvalVar() {
	SetEvalVar "$@"
	EchoEvalVar
}

name=${0##*/}
gpg_args=
add_args=
Sanitize d_ttl 315360000
Sanitize m_ttl 315360000
start_agent=:
start_add=:
start_exec=:
print_environment=false
default_keys=:
set_tty=:
update_tty=:
modify_path=:
check_added_keys=:
verbose=false
OPTIND=1
while getopts 'd:t:GAXeTUkKPg:a:x:vVhH' opt
do	case $opt in
	d)	Sanitize d_ttl "$OPTARG";;
	t)	Sanitize m_ttl "$OPTARG";;
	G)	start_agent=false;;
	A)	start_add=false;;
	X)	start_exec=false;;
	e)	print_environment=:;;
	g)	Push gpg_args "$OPTARG";;
	a)	Push add_args "$OPTARG";;
	x)	name=${OPTARG##*/};;
	T)	set_tty=false;;
	U)	update_tty=false;;
	k)	check_added_keys=false;;
	K)	default_keys=false;;
	P)	modify_path=false;;
	v)	verbose=:;;
	V)	Version;;
	'?')	exit 1;;
	*)	Usage 0;;
	esac
done
shift $(( $OPTIND -1 ))

if $print_environment
then	verbose=false
	start_exec=false
fi

# 0.

if $modify_path
then	oldpath=${PATH-}
RemoveOldpath() {
	oldpath=${oldpath#"$1":}
	oldpath=${oldpath%:"$1"}
	if [ "$oldpath" = "$1" ]
	then	oldpath=
		return
	fi
	while :
	do	removeoldpath=${oldpath#*:"$1":}
		[ "$removeoldpath" != "$oldpath" ] || return 0
		oldpath=${oldpath%%:"$1":*}:$removeoldpath
	done
}
	RemoveOldpath /usr/local/bin
	RemoveOldpath /usr/bin
	RemoveOldpath /bin
	PATH=/usr/local/bin:/usr/bin:/bin${oldpath:+:}${oldpath#:}
	export PATH
	! $verbose || Echo "PATH=$PATH; export PATH"
fi

status=0

if $set_tty
then	export_tty='test -t 0 && GPG_TTY=`tty` && export GPG_TTY'
else	export_tty=
fi

# 1.

StartGpg() {
	if [ -n "${export_tty:++}" ]
	then	! $verbose || Echo "$export_tty"
		eval "$export_tty"
	fi
	startgpg='gpg-agent --daemon --enable-ssh-support'
	if [ -n "${d_ttl:++}" ]
	then	startgpg=$startgpg' --default-cache-ttl-ssh '$d_ttl
		startgpg=$startgpg' --default-cache-ttl '$d_ttl
	fi
	if [ -n "${m_ttl:++}" ]
	then	startgpg=$startgpg' --max-cache-ttl-ssh '$m_ttl
		startgpg=$startgpg' --max-cache-ttl '$m_ttl
	fi
	[ -z "${gpg_args:++}" ] || startgpg=$startgpg' '$gpg_args
	! $verbose || Echo "$startgpg"
	startgpg=`eval "$startgpg"` || {
		status=$?
		if $print_environment
		then	EchoSetEvalVar "$export_tty"
			exit $status
		fi
		return
	}
	if $print_environment
	then	EchoSetEvalVar "$export_tty" "$startgpg"
		$start_add || exit 0
	fi
	[ -n "$startgpg" ] || return 0
	! $verbose || Echo "$startgpg"
	eval "$startgpg"
}

ReviveGpg() {
	InitEvalVar "$export_tty"
	if [ "${gnupg_SSH_AUTH_SOCK_by:-0}" -ne $$ ]
	then	AddEvalVar 'SSH_AUTH_SOCK=`gpgconf --list-dirs agent-ssh-socket`&& test -S "$SSH_AUTH_SOCK" || SSH_AUTH_SOCK=`gpgconf --list-dirs | sed -n -e '\''s/^agent-socket://p'\''`; export SSH_AUTH_SOCK'
	fi
	if $update_tty
	then	AddEvalVar '[ -z "${GPG_TTY:++}" ] || gpg-connect-agent updatestartuptty /bye >/dev/null'
	else	AddEvalVar
	fi
	FinishEvalVar
	if $print_environment
	then	EchoEvalVar
		$start_add || exit 0
	fi
	! $verbose || EchoEvalVar
	EvalEvalVar
}

! $verbose || Echo "unset SSH_AUTH_SOCK SSH_AGENTPID"
unset SSH_AUTH_SOCK SSH_AGENT_PID
if $start_agent && ! gpg-agent >/dev/null 2>&1
then	StartGpg
else	ReviveGpg
fi

# 2.

AddKeys() {
	set +f
	for addkeys in "$HOME"/.ssh/*.pub
	do	
		addkeys="${addkeys%.[^.]*}"
		test -f "$addkeys" && test -r "$addkeys" && Push add_args "$addkeys"
	done
	set -f
}

SshHaveAddedKeys() {
	$check_added_keys && sshhaveaddedkeys=`LANG=C LC_MESSAGES=C
		ssh-add -l 2>/dev/null` || return
	case ${sshhaveaddedkeys:--} in
	'-'|*'no ident'*|*'not ident'*)
		return 1;;
	esac
}

SshAdd() {
	! SshHaveAddedKeys || return 0
	eval "set -- a $add_args"
	shift
	EchoExec ssh-add "$@" || status=$?
}

if $start_add
then	keys=
	! $default_keys || AddKeys
	SshAdd
fi

# 3.

if $start_exec && [ -n "$name" ] && [ "$name" != 'sshstart' ]
then	EchoExec exec \
	"${name%[!abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPRSTUVWXYZ]*}" \
	"$@" || status=$?
fi

exit $status
